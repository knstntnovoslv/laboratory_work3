#pragma once
#include<string>
#include "set.hpp"
template<typename T>
void func_for_my_set(tree_elem<T>* t){
    t->m_value = 3 * t->m_value;
}
template<typename T>
bool isMoreTwo(tree_elem<T>* curr){
    if(curr) {
        if (curr->m_value >= 2) {
            return true;
        } else {
            return false;
        }
    }
}


void test_for_int_set_lkp(){
    int value1 = 6;
    auto Set1 = new Set<int>(value1);
    Set1->Insert(4);
    Set1->Insert(8);
    Set1->Insert(5);
    Set1->Insert(3);
    cout << "First Set: ";
    Set1->print_lkp();
    int value2 = 8;
    auto Set2 = new Set<int>(value2);
    Set2->Insert(11);
    Set2->Insert(12);
    Set2->Insert(13);
    Set2->Insert(14);
    cout<<"Second Set: ";
    Set2->print_lkp();
    int value3 = 32;
    auto Set4 = new Set<int>(value3);
    Set4->Insert(4);
    Set4->Insert(110);
    Set4->Insert(234);
    Set4->Insert(71);
    Set4->Insert(234);
    cout<<"Third Set: ";
    Set4->print_lkp();
    Set<int> set3 = *Set1 + *Set2;
    cout<<"Union test for First and Second Sets: ";
    set3.print_lkp();
    cout<<"Cross test for First and Second Sets: ";
    Set<int> Set5 = (*Set1) * (*Set4);
    Set5.print_lkp();
    cout<<"Substraction set test for Union and Second Set: ";
    Set<int> set5 = set3 - *Set2;
    set5.print_lkp();
    cout<<"Map Test for Set 2: ";
    Set2->Map_lkp(func_for_my_set);
    Set2->print_lkp();
    cout<<"Where Test for Set 1: ";
    Set1->Where_lkp(isMoreTwo);
    Set1->print_lkp();
    cout<<"Index Test for Third Tree: ";
    cout<<(*Set4)[3]<<"\n";
}
void test_for_int_set_pkl(){
    int value1 = 6;
    auto Set1 = new Set<int>(value1);
    Set1->Insert(4);
    Set1->Insert(8);
    Set1->Insert(5);
    Set1->Insert(3);
    cout << "First Set: ";
    Set1->print_pkl();
    int value2 = 8;
    auto Set2 = new Set<int>(value2);
    Set2->Insert(11);
    Set2->Insert(12);
    Set2->Insert(13);
    Set2->Insert(14);
    cout<<"Second Set: ";
    Set2->print_pkl();
    int value3 = 32;
    auto Set4 = new Set<int>(value3);
    Set4->Insert(4);
    Set4->Insert(110);
    Set4->Insert(234);
    Set4->Insert(71);
    cout<<"Third Set: ";
    Set4->print_pkl();
    Set<int> set3 = Set1->Sum_pkl(*Set2);
    cout<<"Union test for First and Second Sets: ";
    set3.print_pkl();
    cout<<"Cross test for First and Second Sets: ";
    Set<int> Set5 = Set2->Cross_pkl(*Set1);
    Set5.print_pkl();
    cout<<"out of set test for Union and First Set: ";
    Set<int> set5 = set3.Substraction_pkl(*Set1);
    set5.print_pkl();
    cout<<"Map Test for Set 2: ";
    Set2->Map_pkl(func_for_my_set);
    Set2->print_pkl();
    cout<<"Where Test for Set 1: ";
    Set1->Where_pkl(isMoreTwo);
    Set1->print_pkl();
    cout<<"Index Test for Third Tree: ";
    cout<<Set4->Getel_pkl(3)<<"\n";
}
void test_for_int_set_kpl(){
    int value1 = 6;
    auto Set1 = new Set<int>(value1);
    Set1->Insert(4);
    Set1->Insert(8);
    Set1->Insert(5);
    Set1->Insert(3);
    cout << "First Set: ";
    Set1->print_kpl();
    int value2 = 8;
    auto Set2 = new Set<int>(value2);
    Set2->Insert(11);
    Set2->Insert(12);
    Set2->Insert(13);
    Set2->Insert(14);
    cout<<"Second Set: ";
    Set2->print_kpl();
    int value3 = 32;
    auto Set4 = new Set<int>(value3);
    Set4->Insert(4);
    Set4->Insert(110);
    Set4->Insert(234);
    Set4->Insert(71);
    cout<<"Third Set: ";
    Set4->print_kpl();
    Set<int> set3 = Set1->Sum_kpl(*Set2);
    cout<<"Union test for First and Second Sets: ";
    set3.print_kpl();
    cout<<"Cross test for First and Second Sets: ";
    Set<int> Set5 = Set2->Cross_kpl(*Set1);
    Set5.print_kpl();
    cout<<"out of set test for Union and First Set: ";
    Set<int> set5 = set3.Substraction_kpl(*Set1);
    set5.print_kpl();
    cout<<"Map Test for Set 2: ";
    Set2->Map_kpl(func_for_my_set);
    Set2->print_kpl();
    cout<<"Where Test for Set 1: ";
    Set1->Where_kpl(isMoreTwo);
    Set1->print_kpl();
    cout<<"Index Test for Third Tree: ";
    cout<<Set4->Getel_kpl(3)<<"\n";
}
void test_for_int_set_klp(){
    int value1 = 6;
    auto Set1 = new Set<int>(value1);
    Set1->Insert(4);
    Set1->Insert(8);
    Set1->Insert(5);
    Set1->Insert(3);
    cout << "First Set: ";
    Set1->print_klp();
    int value2 = 8;
    auto Set2 = new Set<int>(value2);
    Set2->Insert(11);
    Set2->Insert(12);
    Set2->Insert(13);
    Set2->Insert(14);
    cout<<"Second Set: ";
    Set2->print_klp();
    int value3 = 32;
    auto Set4 = new Set<int>(value3);
    Set4->Insert(4);
    Set4->Insert(110);
    Set4->Insert(234);
    Set4->Insert(71);
    cout<<"Third Set: ";
    Set4->print_klp();
    Set<int> set3 = Set1->Sum_klp(*Set2);
    cout<<"Union test for First and Second Sets: ";
    set3.print_klp();
    cout<<"Cross test for First and Second Sets: ";
    Set<int> Set5 = Set2->Cross_klp(*Set1);
    Set5.print_klp();
    cout<<"out of set test for Union and First Set: ";
    Set<int> set5 = set3.Substraction_klp(*Set1);
    set5.print_klp();
    cout<<"Map Test for Set 2: ";
    Set2->Map_klp(func_for_my_set);
    Set2->print_klp();
    cout<<"Where Test for Set 1: ";
    Set1->Where_klp(isMoreTwo);
    Set1->print_klp();
    cout<<"Index Test for Third Tree: ";
    cout<<Set4->Getel_klp(3)<<"\n";
}
void test_for_int_set_lpk(){
    int value1 = 6;
    auto Set1 = new Set<int>(value1);
    Set1->Insert(4);
    Set1->Insert(8);
    Set1->Insert(5);
    Set1->Insert(3);
    cout << "First Set: ";
    Set1->print_lpk();
    int value2 = 8;
    auto Set2 = new Set<int>(value2);
    Set2->Insert(11);
    Set2->Insert(12);
    Set2->Insert(13);
    Set2->Insert(14);
    cout<<"Second Set: ";
    Set2->print_lpk();
    int value3 = 32;
    auto Set4 = new Set<int>(value3);
    Set4->Insert(4);
    Set4->Insert(110);
    Set4->Insert(234);
    Set4->Insert(71);
    cout<<"Third Set: ";
    Set4->print_lpk();
    Set<int> set3 = Set1->Sum_lpk(*Set2);
    cout<<"Union test for First and Second Sets: ";
    set3.print_lpk();
    cout<<"Cross test for First and Second Sets: ";
    Set<int> Set5 = Set2->Cross_lpk(*Set1);
    Set5.print_lpk();
    cout<<"out of set test for Union and First Set: ";
    Set<int> set5 = set3.Substraction_lpk(*Set1);
    set5.print_lpk();
    cout<<"Map Test for Set 2: ";
    Set2->Map_lpk(func_for_my_set);
    Set2->print_lpk();
    cout<<"Where Test for Set 1: ";
    Set1->Where_lpk(isMoreTwo);
    Set1->print_lpk();
    cout<<"Index Test for Third Tree: ";
    cout<<Set4->Getel_lpk(3)<<"\n";
}
void test_for_int_set_plk(){
    int value1 = 6;
    auto Set1 = new Set<int>(value1);
    Set1->Insert(4);
    Set1->Insert(8);
    Set1->Insert(5);
    Set1->Insert(3);
    cout << "First Set: ";
    Set1->print_plk();
    int value2 = 8;
    auto Set2 = new Set<int>(value2);
    Set2->Insert(11);
    Set2->Insert(12);
    Set2->Insert(13);
    Set2->Insert(14);
    cout<<"Second Set: ";
    Set2->print_plk();
    int value3 = 32;
    auto Set4 = new Set<int>(value3);
    Set4->Insert(4);
    Set4->Insert(110);
    Set4->Insert(234);
    Set4->Insert(71);
    cout<<"Third Set: ";
    Set4->print_plk();
    Set<int> set3 = Set1->Sum_plk(*Set2);
    cout<<"Union test for First and Second Sets: ";
    set3.print_plk();
    cout<<"Cross test for First and Second Sets: ";
    Set<int> Set5 = Set2->Cross_plk(*Set1);
    Set5.print_plk();
    cout<<"out of set test for Union and First Set: ";
    Set<int> set5 = set3.Substraction_plk(*Set1);
    set5.print_plk();
    cout<<"Map Test for Set 2: ";
    Set2->Map_plk(func_for_my_set);
    Set2->print_plk();
    cout<<"Where Test for Set 1: ";
    Set1->Where_plk(isMoreTwo);
    Set1->print_plk();
    cout<<"Index Test for Third Tree: ";
    cout<<Set4->Getel_plk(3)<<"\n";
}

void test_for_double_set_lkp(){
    double value1 = 6.4;
    auto Set1 = new Set<double>(value1);
    Set1->Insert(4.1);
    Set1->Insert(8.8);
    Set1->Insert(5.76);
    Set1->Insert(3.21);
    cout << "First Set: ";
    Set1->print_lkp();
    double value2 = 8.26;
    auto Set2 = new Set<double>(value2);
    Set2->Insert(11.34);
    Set2->Insert(12.09);
    Set2->Insert(13.46);
    Set2->Insert(14.43);
    cout<<"Second Set: ";
    Set2->print_lkp();
    double value3 = 32.34;
    auto Set4 = new Set<double>(value3);
    Set4->Insert(4.1);
    Set4->Insert(110.2);
    Set4->Insert(234.3);
    Set4->Insert(71.4);
    Set4->Insert(234.5);
    cout<<"Third Set: ";
    Set4->print_lkp();
    Set<double> set3 = *Set1 + *Set2;
    cout<<"Union test for First and Second Sets: ";
    set3.print_lkp();
    cout<<"Cross test for First and Second Sets: ";
    Set<double> Set5 = (*Set1) * (*Set4);
    Set5.print_lkp();
    cout<<"Substraction set test for Union and Second Set: ";
    Set<double> set5 = set3 - *Set2;
    set5.print_lkp();
    cout<<"Map Test for Set 2: ";
    Set2->Map_lkp(func_for_my_set);
    Set2->print_lkp();
    cout<<"Where Test for Set 1: ";
    Set1->Where_lkp(isMoreTwo);
    Set1->print_lkp();
    cout<<"Index Test for Third Tree: ";
    cout<<(*Set4)[3]<<"\n";
}

void test_for_double_set_lpk(){
    double value1 = 6.4;
    auto Set1 = new Set<double>(value1);
    Set1->Insert(4.1);
    Set1->Insert(8.8);
    Set1->Insert(5.76);
    Set1->Insert(3.21);
    cout << "First Set: ";
    Set1->print_lpk();
    double value2 = 8.26;
    auto Set2 = new Set<double>(value2);
    Set2->Insert(11.34);
    Set2->Insert(12.09);
    Set2->Insert(13.46);
    Set2->Insert(14.43);
    cout<<"Second Set: ";
    Set2->print_lpk();
    double value3 = 32.34;
    auto Set4 = new Set<double>(value3);
    Set4->Insert(4.1);
    Set4->Insert(110.2);
    Set4->Insert(234.3);
    Set4->Insert(71.4);
    Set4->Insert(234.5);
    cout<<"Third Set: ";
    Set4->print_lpk();
    Set<double> set3 = Set1->Sum_lpk(*Set2);
    cout<<"Union test for First and Second Sets: ";
    set3.print_lpk();
    cout<<"Cross test for First and Second Sets: ";
    Set<double> Set5 = Set1->Cross_lpk(*Set2);
    Set5.print_lpk();
    cout<<"Substraction set test for Union and Second Set: ";
    Set<double> set5 = set3.Cross_lpk(*Set2);
    set5.print_lpk();
    cout<<"Map Test for Set 2: ";
    Set2->Map_lpk(func_for_my_set);
    Set2->print_lpk();
    cout<<"Where Test for Set 1: ";
    Set1->Where_lpk(isMoreTwo);
    Set1->print_lpk();
    cout<<"Index Test for Third Tree: ";
    cout<<Set4->Getel_lpk(3)<<"\n";
}

void test_for_double_set_plk(){
    double value1 = 6.4;
    auto Set1 = new Set<double>(value1);
    Set1->Insert(4.1);
    Set1->Insert(8.8);
    Set1->Insert(5.76);
    Set1->Insert(3.21);
    cout << "First Set: ";
    Set1->print_plk();
    double value2 = 8.26;
    auto Set2 = new Set<double>(value2);
    Set2->Insert(11.34);
    Set2->Insert(12.09);
    Set2->Insert(13.46);
    Set2->Insert(14.43);
    cout<<"Second Set: ";
    Set2->print_plk();
    double value3 = 32.34;
    auto Set4 = new Set<double>(value3);
    Set4->Insert(4.1);
    Set4->Insert(110.2);
    Set4->Insert(234.3);
    Set4->Insert(71.4);
    Set4->Insert(234.5);
    cout<<"Third Set: ";
    Set4->print_plk();
    Set<double> set3 = Set1->Sum_plk(*Set2);
    cout<<"Union test for First and Second Sets: ";
    set3.print_plk();
    cout<<"Cross test for First and Second Sets: ";
    Set<double> Set5 = Set1->Cross_plk(*Set2);
    Set5.print_plk();
    cout<<"Substraction set test for Union and Second Set: ";
    Set<double> set5 = set3.Cross_plk(*Set2);
    set5.print_plk();
    cout<<"Map Test for Set 2: ";
    Set2->Map_plk(func_for_my_set);
    Set2->print_plk();
    cout<<"Where Test for Set 1: ";
    Set1->Where_plk(isMoreTwo);
    Set1->print_plk();
    cout<<"Index Test for Third Tree: ";
    cout<<Set4->Getel_plk(3)<<"\n";
}

void test_for_double_set_pkl(){
    double value1 = 6.4;
    auto Set1 = new Set<double>(value1);
    Set1->Insert(4.1);
    Set1->Insert(8.8);
    Set1->Insert(5.76);
    Set1->Insert(3.21);
    cout << "First Set: ";
    Set1->print_pkl();
    double value2 = 8.26;
    auto Set2 = new Set<double>(value2);
    Set2->Insert(11.34);
    Set2->Insert(12.09);
    Set2->Insert(13.46);
    Set2->Insert(14.43);
    cout<<"Second Set: ";
    Set2->print_pkl();
    double value3 = 32.34;
    auto Set4 = new Set<double>(value3);
    Set4->Insert(4.1);
    Set4->Insert(110.2);
    Set4->Insert(234.3);
    Set4->Insert(71.4);
    Set4->Insert(234.5);
    cout<<"Third Set: ";
    Set4->print_pkl();
    Set<double> set3 = Set1->Sum_pkl(*Set2);
    cout<<"Union test for First and Second Sets: ";
    set3.print_pkl();
    cout<<"Cross test for First and Second Sets: ";
    Set<double> Set5 = Set1->Cross_pkl(*Set2);
    Set5.print_pkl();
    cout<<"Substraction set test for Union and Second Set: ";
    Set<double> set5 = set3.Cross_pkl(*Set2);
    set5.print_pkl();
    cout<<"Map Test for Set 2: ";
    Set2->Map_pkl(func_for_my_set);
    Set2->print_pkl();
    cout<<"Where Test for Set 1: ";
    Set1->Where_pkl(isMoreTwo);
    Set1->print_pkl();
    cout<<"Index Test for Third Tree: ";
    cout<<Set4->Getel_pkl(3)<<"\n";
}

void test_for_double_set_klp(){
    double value1 = 6.4;
    auto Set1 = new Set<double>(value1);
    Set1->Insert(4.1);
    Set1->Insert(8.8);
    Set1->Insert(5.76);
    Set1->Insert(3.21);
    cout << "First Set: ";
    Set1->print_klp();
    double value2 = 8.26;
    auto Set2 = new Set<double>(value2);
    Set2->Insert(11.34);
    Set2->Insert(12.09);
    Set2->Insert(13.46);
    Set2->Insert(14.43);
    cout<<"Second Set: ";
    Set2->print_klp();
    double value3 = 32.34;
    auto Set4 = new Set<double>(value3);
    Set4->Insert(4.1);
    Set4->Insert(110.2);
    Set4->Insert(234.3);
    Set4->Insert(71.4);
    Set4->Insert(234.5);
    cout<<"Third Set: ";
    Set4->print_klp();
    Set<double> set3 = Set1->Sum_klp(*Set2);
    cout<<"Union test for First and Second Sets: ";
    set3.print_klp();
    cout<<"Cross test for First and Second Sets: ";
    Set<double> Set5 = Set1->Cross_klp(*Set2);
    Set5.print_klp();
    cout<<"Substraction set test for Union and Second Set: ";
    Set<double> set5 = set3.Cross_klp(*Set2);
    set5.print_klp();
    cout<<"Map Test for Set 2: ";
    Set2->Map_klp(func_for_my_set);
    Set2->print_klp();
    cout<<"Where Test for Set 1: ";
    Set1->Where_klp(isMoreTwo);
    Set1->print_klp();
    cout<<"Index Test for Third Tree: ";
    cout<<Set4->Getel_klp(3)<<"\n";
}

void test_for_double_set_kpl(){
    double value1 = 6.4;
    auto Set1 = new Set<double>(value1);
    Set1->Insert(4.1);
    Set1->Insert(8.8);
    Set1->Insert(5.76);
    Set1->Insert(3.21);
    cout << "First Set: ";
    Set1->print_kpl();
    double value2 = 8.26;
    auto Set2 = new Set<double>(value2);
    Set2->Insert(11.34);
    Set2->Insert(12.09);
    Set2->Insert(13.46);
    Set2->Insert(14.43);
    cout<<"Second Set: ";
    Set2->print_kpl();
    double value3 = 32.34;
    auto Set4 = new Set<double>(value3);
    Set4->Insert(4.1);
    Set4->Insert(110.2);
    Set4->Insert(234.3);
    Set4->Insert(71.4);
    Set4->Insert(234.5);
    cout<<"Third Set: ";
    Set4->print_kpl();
    Set<double> set3 = Set1->Sum_kpl(*Set2);
    cout<<"Union test for First and Second Sets: ";
    set3.print_kpl();
    cout<<"Cross test for First and Second Sets: ";
    Set<double> Set5 = Set1->Cross_kpl(*Set2);
    Set5.print_kpl();
    cout<<"Substraction set test for Union and Second Set: ";
    Set<double> set5 = set3.Cross_kpl(*Set2);
    set5.print_kpl();
    cout<<"Map Test for Set 2: ";
    Set2->Map_kpl(func_for_my_set);
    Set2->print_kpl();
    cout<<"Where Test for Set 1: ";
    Set1->Where_kpl(isMoreTwo);
    Set1->print_kpl();
    cout<<"Index Test for Third Tree: ";
    cout<<Set4->Getel_kpl(3)<<"\n";
}